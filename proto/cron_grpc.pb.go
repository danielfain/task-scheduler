// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/cron.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskScheduler_AddTask_FullMethodName    = "/cron.TaskScheduler/AddTask"
	TaskScheduler_DeleteTask_FullMethodName = "/cron.TaskScheduler/DeleteTask"
	TaskScheduler_ListTasks_FullMethodName  = "/cron.TaskScheduler/ListTasks"
)

// TaskSchedulerClient is the client API for TaskScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskSchedulerClient interface {
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*TaskId, error)
	DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error)
	ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Task], error)
}

type taskSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskSchedulerClient(cc grpc.ClientConnInterface) TaskSchedulerClient {
	return &taskSchedulerClient{cc}
}

func (c *taskSchedulerClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*TaskId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskId)
	err := c.cc.Invoke(ctx, TaskScheduler_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TaskScheduler_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Task], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskScheduler_ServiceDesc.Streams[0], TaskScheduler_ListTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Task]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskScheduler_ListTasksClient = grpc.ServerStreamingClient[Task]

// TaskSchedulerServer is the server API for TaskScheduler service.
// All implementations must embed UnimplementedTaskSchedulerServer
// for forward compatibility.
type TaskSchedulerServer interface {
	AddTask(context.Context, *AddTaskRequest) (*TaskId, error)
	DeleteTask(context.Context, *TaskId) (*Empty, error)
	ListTasks(*Empty, grpc.ServerStreamingServer[Task]) error
	mustEmbedUnimplementedTaskSchedulerServer()
}

// UnimplementedTaskSchedulerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskSchedulerServer struct{}

func (UnimplementedTaskSchedulerServer) AddTask(context.Context, *AddTaskRequest) (*TaskId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedTaskSchedulerServer) DeleteTask(context.Context, *TaskId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskSchedulerServer) ListTasks(*Empty, grpc.ServerStreamingServer[Task]) error {
	return status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskSchedulerServer) mustEmbedUnimplementedTaskSchedulerServer() {}
func (UnimplementedTaskSchedulerServer) testEmbeddedByValue()                       {}

// UnsafeTaskSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskSchedulerServer will
// result in compilation errors.
type UnsafeTaskSchedulerServer interface {
	mustEmbedUnimplementedTaskSchedulerServer()
}

func RegisterTaskSchedulerServer(s grpc.ServiceRegistrar, srv TaskSchedulerServer) {
	// If the following call pancis, it indicates UnimplementedTaskSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskScheduler_ServiceDesc, srv)
}

func _TaskScheduler_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).DeleteTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_ListTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskSchedulerServer).ListTasks(m, &grpc.GenericServerStream[Empty, Task]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskScheduler_ListTasksServer = grpc.ServerStreamingServer[Task]

// TaskScheduler_ServiceDesc is the grpc.ServiceDesc for TaskScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cron.TaskScheduler",
	HandlerType: (*TaskSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _TaskScheduler_AddTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskScheduler_DeleteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTasks",
			Handler:       _TaskScheduler_ListTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cron.proto",
}
